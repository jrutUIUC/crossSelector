#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(wesanderson)
library(ggplot2)
library(gt)
library(crossSelector)
#library(googlesheets4)
data(crossRank22_23)
q<- q[,c('V1no', 'V2no', 'V1', 'V2','nmvec', 'rank', 'timesMade')]
colnames(q)[1:2]<- c('p1', 'p2')
colnames(q)[5]<- 'merit'

#function to id the best cross combination given possible females and males
idTop<- function(males, females, q){
    p1<- c()
    p2<- c()
    for(i in 1:length(males)){
        for(j in 1:length(females)){
            p2<- append(p2, males[i])
            p1<- append(p1, females[j])
        }
    }
    q1<- data.frame(p1, p2)
    tab<- merge(q1, q, by=c('p1', 'p2'), all.x=TRUE)
    tab<- na.omit(tab[order(tab$rank),])
    selected<- tab[1,]
    return(selected)
}

#function to match parents
matchParents<- function(q, males, females, crossesMade, maxRepeat){
    #track how many times crosses were made in the table
    combMade<- data.frame(t(matrix(as.numeric(unlist(strsplit(crossesMade, split='x'))), nrow=2)))
    colnames(combMade)<- c('p1', 'p2')
    combMade2<-combMade[,c(2,1)]; colnames(combMade2)<- colnames(combMade)
    combMade<- rbind(combMade, combMade2)
    if(nrow(combMade)>0){
        for(i in 1:nrow(combMade)){
            rowIx<- intersect(which(combMade$p1[i]==q$p1), which(combMade$p2[i]==q$p2))
            q[rowIx, 'timesMade']<- q[rowIx, 'timesMade']+1
        }
    }
    
    qb<- q
    qb$p1<- q$p2
    qb$p2<- q$p1
    tball<- rbind(q, qb)
    tball$timesMade<- as.character(tball$timesMade)
    tball$timesMade[which(tball$timesMade=='0')]<- ""
    
    #make image
    tball$p1<- factor(as.character(tball$p1), levels=as.character(unique(sort(as.numeric(tball$p1)))))
    tball$p2<- factor(as.character(tball$p2), levels=as.character(unique(sort(as.numeric(tball$p2)))))
    pal <- adjust_luminance(wes_palette("Zissou1", 100, type = "continuous"),2)
    p <- ggplot(tball, aes(p1, p2)) + geom_tile(aes(fill = merit), colour = "black") +
        geom_text(aes(label = timesMade)) +
        scale_fill_gradientn(colours =pal, na.value="white")
    
    
    #eliminate the value of crosses already repeated 'maxRepeat' number of times
    ixrm<- which(q$timesMade>=maxRepeat)
    if(length(ixrm)>0){
        q<- q[-ixrm,]
    }
    
    #determine which crosses to make
    p1<- c()
    p2<- c()
    q0<- q
    while(length(males)>0 & length(females)>0){
        top<- idTop(males, females, q)
        
        #track the cross as made
        if(nrow(na.omit(top))>0){
            rowIx<- c(intersect(which(top$p1==q$p1), which(top$p2==q$p2)),intersect(which(top$p1==q$p2), which(top$p2==q$p1)))
            q[rowIx, 'timesMade']<- q[rowIx, 'timesMade']+1
            if(unique(q[rowIx, 'timesMade']+1)>maxRepeat){
                q<- q[-rowIx,]
            }
        }
        
        #record crosses and remove the males and females from the possible list
        if(nrow(na.omit(top))>0){
            maleRm<- top[1,'p2']
            femaleRm<- top[1,'p1']
            p1<- append(p1, femaleRm)
            p2<- append(p2, maleRm)
            ixrm1<- match(maleRm, males)
            ixrm2<- match(femaleRm, females)
            males<- males[-ixrm1]
            females<- females[-ixrm2]
        }else{
            break
        }
    }
    q1<- data.frame(p1, p2)
    tab<- merge(q1, q0, by=c('p1', 'p2'), all.x=TRUE)
    tab<- tab[order(tab$rank, decreasing=FALSE),]
    tab$p1<- as.character(tab$p1)
    tab$p2<- as.character(tab$p2)
    
    #Add crosses to plot
    frames <- data.frame(p1 = c(tab$p1,tab$p2),
                         p2 = c(tab$p2, tab$p1))
    p<- p+ geom_tile(data=frames,fill="red", width=0.3)
    p<- p+ geom_tile(data=frames,fill="red", height=0.3)
    
    #return results
    tab<- unique(tab)
    return(list(tab=tab, p=p))
    
}

### Run algorithm
library(shiny)
# Define UI for application that draws a histogram
ui <- pageWithSidebar(
    headerPanel('Match parents'),
    sidebarPanel(
        #fileInput("file1", "Cross rankings: Choose .csv file",
        #accept = c(
        #"text/csv",
        #"text/comma-separated-values,text/plain",
        #".csv")),
        fileInput("crossesMade", "Crosses made: Choose .csv file",
                  accept = c(
                      "text/csv",
                      "text/comma-separated-values,text/plain",
                      ".csv")),
        fileInput("femalesmales", "Females and males ready: Choose .csv file",
                  accept = c(
                      "text/csv",
                      "text/comma-separated-values,text/plain",
                      ".csv")),
        fluidRow(column(12,
                        textAreaInput("maxRepeat", "Max repeats", value = "2", width = '100%', rows = 1, resize = "both"))),
        submitButton("Apply Changes")), #place a submit into the UI.
    #mainPanel(fluidRow(column(12,tableOutput('table'))))
    mainPanel(
        tabsetPanel(
            tabPanel("Table", tableOutput("table")),
            tabPanel("Plot", plotOutput("plot"))
        )
    )
    
)

# Define server logic required
server <- function(input, output) {
    
    
    dataInput <- reactive({
        
        #inFile <- input$file1
        #if(!is.null(inFile)){
        #  q<- read.csv(input$file1$datapath)
        #}
        
        #males and females
        #infile <- input$femalesmales
        #gs4_deauth()
        #gs4_auth(email="smallgrains.uiuc@gmail.com")
        #ss<- read_sheet("https://docs.google.com/spreadsheets/d/1bKxycfRMvPMTmvjRodI1dZwq_BHLKILNu2YGP9w0IPw/edit?usp=sharing")
        #infileCrosses<- data.frame(ss)
        #males and females
        infileCrosses <- input$femalesmales
        if(!is.null(infileCrosses)){
            df<- read.csv(input$femalesmales$datapath, stringsAsFactors = FALSE)
            males<- df[,'males']
            females<-df[,'females']
        }else{
            males<-c(1,3,5,7,9)
            females<- c(2,4,6,8,10)
        }
        males<- as.numeric(males)
        females<- as.numeric(females)
        
        #crosses made
        infileCrosses <- input$crossesMade
        if(!is.null(infileCrosses)){
            crossesMade<- read.csv(input$crossesMade$datapath, stringsAsFactors = FALSE)[,1]
        }else{
            crossesMade<-""
        }
        
        maxRepeat<- as.numeric(input$maxRepeat)
        tab<- matchParents(q, males, females, crossesMade, maxRepeat)
    })
    
    output$table <- renderTable({
        dataInput()[[1]]
    }, rownames=FALSE)
    
    output$plot <- renderPlot({
        dataInput()[[2]]
    })
    
}

# Run the application
shinyApp(ui = ui, server = server)

#matchParents(q, males=c(1), females=c(3), crossesMade=c('0x1'), maxRepeat=1)
